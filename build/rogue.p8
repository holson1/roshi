pico-8 cartridge // http://www.pico-8.com
version 29
__lua__
--src/hud.lua
-- hud


function _use_inspect()
end

function _use_tongue()
end

function _use_egg()
end

function _use_key()
end

function init_hud()
    local hud = {

        items={
            {spr=034, name='inspect', desc='look around', use=_use_inspect},
            {spr=033, name='tongue', desc='grab things 2 tiles away', use=_use_tongue},
            {spr=032, name='egg', desc='throw at enemies', use=_use_egg}
        },
        selected_item=1,
        msg1="welcome to roshi's dungeon",
        msg2='find the key',
        coins=05,
        spri=0,

        set_msg = function(self, m1, m2)
            self.msg1 = m1
            self.msg2 = m2
        end,
        
        clear_msg = function(self)
            self.msg1 = ''
            self.msg2 = ''
        end,

        pickup_item = function(self, item)
            add(self.items, item)
            sfx(item.sfx)
            self:set_msg('got: `' .. item.name .. '`', item.desc)
        end,

        update = function(self)
            if (t%8 == 0) then
                self.spri = (self.spri + 1) % 2
            end

            -- use
            if (btnp(4)) then
                sfx(self.items[self.selected_item].sfx) 
                self.items[self.selected_item].use()

                -- catch error w/ using last item
                if (self.selected_item > #self.items) then
                    self.selected_item = #self.items
                end
            end

            -- rotate
            if (btnp(5)) then
                self.selected_item = (self.selected_item + 1) % #self.items
                if (self.selected_item == 0) then
                    self.selected_item = #self.items
                end

                self:set_msg(self.items[self.selected_item]['name'],self.items[self.selected_item]['desc'])
            end
        end,

        draw = function(self)
            local x = cam.x*8
            local y = cam.y*8

            -- items
            for i=1,#self.items do
                spr(self.items[i].spr,x,y+(i*8)-8)
                if (i == self.selected_item) then
                    spr(016 + self.spri,x,y+(i*8)-8)
                end
            end

            -- text
            rectfill(x,y+112,x+127,y+127,0)
            rect(x+8,y+112,x+127,y+127,7)
            rectfill(x+10,y+112,x+125,y+127,0)

            print(self.msg1, x+12, y+114, 15)
            print(self.msg2, x+12, y+121, 15)

            -- health
            for i=0,(char.max_health-1) do
                spr(049,x,y+96-(i*8))
            end
            for i=0,(char.health-1) do
                spr(048,x,y+96-(i*8))
            end

            -- coins
            spr(050,x-1,y+111)
            if (self.coins > 9) then
                print(self.coins,x,y+120,10)
            else
                print('0' .. self.coins,x,y+120,10)
            end

            -- level
            print('l' .. level, x+116, y, 10)
        end
    }
    return hud
end
-->8
--src/levels.lua
levels = {}

function roll_levels()
end
-->8
--src/items.lua
-- items
key = {
    name='key',
    spr=80,
    desc='best used for unlocking',
    sfx=1,
    use=function() end
}

shovel = {
    spr=040,
    name='rusted shovel',
    desc='dig down one level',
    sfx=3,
    use = function ()
        hud:set_msg('you strike the earth', 'the shovel breaks!')
        level += 1
        map = generate_map()
        del(hud.items, shovel)
    end
}

hyper_specs = {
    spr=035,
    name='hyper specs',
    desc='see fake walls',
    sfx=4,
    use = function ()
        hlog('you peer into the void.')
        fake_wall.spr = 023
    end
}

-- coins
coin = {
    id='coin',
    spr=050,
    flag=3,
    value=1
}

red_coin = {
    id='red_coin',
    spr=051,
    flag=3,
    value=5
}

function roll_random_item()
    if (rnd() > 0.5) then
        return shovel
    else
        return hyper_specs
    end
end
-->8
--src/main.lua
-- rogue

function _init()
    -- global vars
    t=0
    cam = {}
    cam.x = 0
    cam.y = 0
    msg=''
    level=1
   
    -- thanks doc_robs!
    dust={}
       
    -- shots=new_group(shot)
    -- booms=new_group(boom)

    goombas=new_group(goomba)

    char=init_char()
    levels=roll_levels()
    map=generate_map()
    hud=init_hud()
end
   
function _update()
    t=(t+1)%128
 
    char:update()
    hud:update()

    -- shots:update()
    -- booms:update()

    if ((t%16)==0) then
        goombas:update()
    end
   
    for d in all(dust) do
        d:update()
    end

    cam.x = max(char.x - 8, 0)
    cam.y = max(char.y - 8, 0)
end
   
function _draw()
    cls()
    camera(cam.x * 8, cam.y * 8)

    draw_map(map)

    char:draw()

    hud:draw()

    goombas:draw()
   
    -- for d in all(dust) do
    --     d:draw()
    -- end
       
    -- debug()
end
-->8
--src/map.lua
MAP_SIZE=24 -- map size in tiles
VISION_RADIUS=5

floor = {
    id='floor',
    spr=018,
    flag=0
}

start = {
    id='start',
    spr=103,
    flag=0
}

-- collidables
empty = {
    spr=017,
    flag=1
}

wall = {
    id='wall',
    spr=020,
    flag=1
}

fake_wall = {
    id='fake_wall',
    spr=017,
    flag=1
}

chest = {
    id='chest',
    spr=024,
    flag=1,
    item={}
}

exit_door = {
    id='exit_door',
    spr=096,
    flag=1
}

exit = {
    id='exit',
    spr=102,
    flag=7
}

function place_item(_map, y, x, _item)
    _map[y][x] = {
        flag=2,
        id=_item.name,
        spr=_item.spr,
        item=_item
    }
end

function place_coin(_map, y, x, _coin)
    _map[y][x] = {
        flag=3,
        id=_coin.id,
        spr=_coin.spr,
        value=_coin.value
    }
end

function place_chest()
    return {
        id='chest',
        spr=024,
        flag=1,
        item=roll_random_item()
    }
end

function place_enemies(rooms)
    -- this will really depend on level but _FOR NOW_ let's do the easy thing and gen a default number

    for room in all(rooms) do
        goombas:new({x=room[2],y=room[1]})
    end
end

function draw_path_between_coords(_map, start, dest)
    local x = 2
    local y = 1

    path_x = start[x]
    path_y = start[y]

    while (path_x ~= dest[x] or path_y ~= dest[y]) do
        _map[path_y][path_x] = floor

        local x_diff = dest[x] - path_x
        local y_diff = dest[y] - path_y

        -- if x is not finished, and if it is chosen OR y is already done, then
        if (abs(x_diff) > 0 and (rnd() > 0.5 or abs(y_diff) == 0)) then
            if (x_diff > 0) then
                path_x += 1
            elseif (x_diff < 0) then
                path_x -= 1
            end
        else
            if (y_diff < 0) then
                path_y -= 1
            elseif (y_diff > 0) then
                path_y += 1
            end
        end
    end
end

function unique_point(points)
    local val = {}
    local found = true

    while found do
        found = false
        val = {rndi(1, MAP_SIZE), rndi(1, MAP_SIZE)}
        for v in all(points) do
            found = coord_match(val,v)
        end
    end

    return val
end

function draw_room(_map, point)
    local MIN_ROOM_SIZE = 3
    local MAX_ROOM_SIZE = 7
   
    -- roll a random room
    local width = rndi(MIN_ROOM_SIZE, MAX_ROOM_SIZE)
    local height = rndi(MIN_ROOM_SIZE, MAX_ROOM_SIZE)

    -- position the room midway over the point
    local room_c = {point[1]-flr(height/2), point[2]-flr(width/2)}

    -- draw the room in
    for i=max(1, room_c[2]), min(room_c[2]+width, MAP_SIZE) do
        for j=max(1, room_c[1]), min(room_c[1]+height, MAP_SIZE) do
            _map[j][i] = floor
        end
    end
end


function generate_map()
    local _map = {}
    for i=0,MAP_SIZE do
        add(_map, {})
        for j=0,MAP_SIZE do
            if (rnd() > 0.97) then
                add(_map[i], fake_wall)
            else
                add(_map[i], empty)
            end
        end
    end

    -- pick a start, exit, and key
    local points = {}
    local start_c = unique_point(points)
    add(points, start_c)
    local exit_c = unique_point(points)
    add(points, exit_c)
    local key_c = unique_point(points)
    add(points, key_c)
    local room1_c = unique_point(points)
    add(points, room1_c)
    local room2_c = unique_point(points)

    local y = 1
    local x = 2

    char.x = start_c[x]
    char.y = start_c[y]

    draw_path_between_coords(_map, start_c, key_c)
    draw_path_between_coords(_map, start_c, exit_c)
    draw_path_between_coords(_map, key_c, room1_c)
    draw_path_between_coords(_map, start_c, room2_c)

    draw_room(_map, start_c)
    -- todo: randomize which points get rooms
    draw_room(_map, exit_c)
    draw_room(_map, room1_c)
    draw_room(_map, room2_c)

    _map[start_c[y]][start_c[x]] = start
    _map[exit_c[y]][exit_c[x]] = exit_door
    place_item(_map, key_c[y], key_c[x], key)
    -- todo: add proper chest generation
    _map[room1_c[y]][room1_c[x]] = place_chest()

    -- place enemies
    place_enemies({room1_c, room2_c})

    return _map
end

function draw_map(_map)
    for i=max(1, char.x-VISION_RADIUS), min(char.x+VISION_RADIUS, MAP_SIZE) do
        for j=max(1, char.y-VISION_RADIUS), min(char.y+VISION_RADIUS, MAP_SIZE) do
            spr(_map[j][i].spr, i*8, j*8)
        end
    end

    -- todo: get rid of this
    if (t % 16 == 0) then
        fake_wall.spr = 017
    end
end
-->8
--src/objects/boom.lua
boom={
    s=008,
    w=8,
    h=8,
    x=nil,
    y=nil,

    update=function(self)
            self.s+=1
            if(self.s>11) self.alive=false
    end
}
-->8
--src/objects/shot.lua
shot={
    w=4,
    h=4,
    s=195,
    x=nil,
    y=nil,
    dx=nil,
    dy=nil,
    d=nil,

    update=function(self)
        -- destroy on OOB
        if self.x < cam.x
            or self.x > cam.x + 128
            or self.y < cam.y
            or self.y > cam.y + 128 then
                self.alive = false
        end
  
        if t%2 == 0 then
            add_new_dust(self.x + self.w, self.y + self.h, self.dx/2, self.dy/2, 9, rnd(3), 0, 15)
        end
   
        self.x+=self.dx
        self.y+=self.dy	
    end
}
-->8
--src/lib/group.lua
function new_group(bp)
    return {
        _={},
        bp=bp,
        
        new=function(self,p)
            for k,v in pairs(bp) do
                if v!=nil then
                    p[k]=v
                end
            end
            p.alive=true
            add(self._,p)
        end,
           
        update=function(self)
            for i,v in ipairs(self._) do
                v:update()
                if v.alive==false then
                del(self._,self._[i])
                end
            end
        end,
        
        draw=function(self)
            for v in all(self._) do
                spr(v.s,v.x*8,v.y*8)
            end
        end
    }
end
-->8
--src/lib/dust.lua
function add_new_dust(_x,_y,_dx,_dy,_l,_s,_g,_f)
    add(dust, {
    fade=_f,x=_x,y=_y,dx=_dx,dy=_dy,life=_l,orig_life=_l,rad=_s,col=0,grav=_g,draw=function(self)
    pal()palt()circfill(self.x,self.y,self.rad,self.col)
    end,update=function(self)
    self.x+=self.dx self.y+=self.dy
    self.dy+=self.grav self.rad*=0.9 self.life-=1
    if type(self.fade)=="table"then self.col=self.fade[flr(#self.fade*(self.life/self.orig_life))+1]else self.col=self.fade end
    if self.life<0then del(dust,self)end end})
end
-->8
--src/lib/util.lua
function rndi(min,max)
    return flr(rnd(max - min)) + min
end

function coord_match(a,b)
    return a[1] == b[1] and a[2] == b[2]
end
-->8
--src/log.lua
_log={}
log_l=4
for i=1,log_l do
    add(_log,'')
end

function hlog(str)
    hud:set_msg(str, '')
end

function log(str)
    add(_log,str)
end
   
function debug()
    vars = {
        't='..t
    }

    -- draw the log
    for i=count(_log)-log_l+1,count(_log) do
        add(vars,'> '.._log[i])
    end

    for i,v in ipairs(vars) do
        print(v,(cam.x*8)+8,(cam.y*8)+(i*8),15)
    end
end
-->8
--src/char.lua
function init_char()
    local char={
        x=4,
        y=4,
        spr=001,
        spri=0,
        state='base',
        move_counter=0,
        idle_counter=0,
        action_time=0,
        flip=false,
        max_health=5,
        health=3,

        states={
            'base',
            'idle'
        },

        animations={
            base={1},
            idle={1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,3,2,2,2,2,1,1,1,1,1,1,1,1,1},
            walk={5,4,4}
        },

        get_animation=function(self)
            return self.animations[self.state]
        end,
        collide=collide,
        update=update_char,

        -- all game logic should be implemented in cells, only draw functions care about px
        draw=function(self)
            spr(self.spr,(self.x * 8),(self.y * 8),1,1,self.flip)
        end
    }
    return char
end

function collide_exit_door(y, x, space)
    if (count(hud.items, key) > 0) then
        hlog('*click*')
        map[y][x] = exit
        del(hud.items, key)
    else
        hlog('i need a key!')
    end
end

function collide_fake_wall(y, x, space)
    place_coin(map, y, x, coin)
    hlog('the fake wall crumbles away...')
end

function collide_chest(y, x, chest)
    place_item(map, y, x, chest.item)
end

function collide(_char, space, y, x)
    local actions = {
        exit_door=collide_exit_door,
        fake_wall=collide_fake_wall,
        chest=collide_chest,
    }
    if (actions[space.id]) then
        actions[space.id](y, x, space)
    end
end

function update_char(_char)
    if (_char.state == 'base') then
        _char.spri = 0
        _char.idle_counter += 1
    end

    if (_char.state == 'walk') then
        _char.move_counter += 1
    end

    check_space(_char)

    handle_input(_char)
    update_position(_char)

    if (_char.idle_counter > 128) then
        _char.state = 'idle'
        _char.idle_counter = 0  
    end

    if (_char.move_counter > 3) then
        _char.state = 'base'
        _char.move_counter = 0
    end

    -- todo: proper animation timing system
    if (_char.spr ~= 'base' and t%4 == 0) then
        _char.spri = (_char.spri + 1) % 32
        set_spr(_char)
    end
end

function handle_input(_char)
    if (btnp(0) or btnp(1) or btnp(2) or btnp(3)) then
        _char.idle_counter = 0
        _char.state = 'walk'
        hud:clear_msg()
    end

    if (btnp(0)) then
        if ((_char.x - 1) > 0) then
            if (map[_char.y][_char.x - 1].flag ~= 1) then
                _char.x -= 1
            else
                _char:collide(map[_char.y][_char.x - 1], _char.y,  _char.x - 1)
            end
        end
        _char.flip = true
    end

    if (btnp(1)) then
        if ((_char.x + 1) < MAP_SIZE+1) then
            if (map[_char.y][_char.x + 1].flag ~= 1) then
                _char.x += 1
            else
                _char:collide(map[_char.y][_char.x + 1], _char.y,  _char.x + 1)
            end
        end
        _char.flip = false
    end

    if (btnp(2)) then
        if ((_char.y - 1) > 0) then
            if (map[_char.y - 1][_char.x].flag ~= 1) then
                _char.y -= 1
            else
                _char:collide(map[_char.y - 1][_char.x], _char.y - 1,  _char.x)
            end
        end
    end

    if (btnp(3)) then
        if ((_char.y + 1) < MAP_SIZE+1) then
            if (map[_char.y + 1][_char.x].flag ~= 1) then
                _char.y += 1
            else
                _char:collide(map[_char.y + 1][_char.x], _char.y + 1,  _char.x)
            end
        end
    end
end
  
function update_position(_char)
end

function set_spr(_char)
    local anim = _char:get_animation()
    local transformed_spri = (_char.spri % #anim) + 1
    
    _char.spr = anim[transformed_spri]
end

function check_space(_char)
    local space = map[_char.y][_char.x]

    -- exit
    if (space.flag == 7) then
        level += 1
        map = generate_map()
    end

    -- objects (carryable)
    if (space.flag == 2) then
        hud:pickup_item(space.item)
        map[_char.y][_char.x] = floor
    end

    -- coins
    if (space.flag == 3) then
        hud.coins += space.value
        map[_char.y][_char.x] = floor
    end
end
-->8
--src/enemies/goomba.lua
goomba={
    life=1,
    s=128,
    x=nil,
    y=nil,
    state='walk',
    spri=0,

    animations={
        idle={128},
        walk={128,130}
    },

    update=function(self)
        -- generic animation code
        self.spri = (self.spri + 1) % 16
        local anim = self.animations[self.state]
        local transformed_spri = (self.spri % #anim) + 1
        
        self.s = anim[transformed_spri]

        -- goombas move in random directions
        local new_cell = nil
        local dirs = {0,0.25,0.5,0.75}
        while new_cell == nil do
            local dir = rnd(dirs)
            local new_x = self.x + cos(dir)
            local new_y = self.y + sin(dir)
            if (map[new_y][new_x].flag == 0) then
                new_cell = {new_y, new_x}
            else
                del(dirs, dir)
                if (#dirs == 0) then
                    new_cell = {self.y, self.x}
                end
            end
        end

        self.y = new_cell[1]
        self.x = new_cell[2]
    end
}
-->8
__gfx__
0000000000000bb000000b0000000b000000000000000bb000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000717100071b17000bbbbb00000bb00000717100000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700000071bb00071b1700033b3300007171000071bb00000000000000000000000000000000000000000000000000000000000000000000000000000000
000770000008bbbb0008bbb00008bbb0000071bb0008bbbb00000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000b88bb000b88bb000b88bb0000008bbbbb88bb00000000000000000000000000000000000000000000000000000000000000000000000000000000000
007007000bbb30000bbb30000bbb3000b88bb0000bbbbb0000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000b3b00000b3b00000b3b0000bbb300000b3000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000082000000820000008200000082b0000800200000000000000000000000000000000000000000000000000000000000000000000000000000000000
aa0000aa0000000000000000000000000600006000000000060000600aa099090077660000000000000000000000000000000000000000000000000000000000
a000000a000000000000000066666666060000600066666606000066000000000777766000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000060000600600000006000000a00000097777776600000000000000000000000000000000000000000000000000000000
00000000000000000001100000000000060000600600000006000000000000098888882200000000000000000000000000000000000000000000000000000000
00000000000000000001100000000000060000600600000006000000900000007788776200000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000060000600600000006000000900000047777776600000000000000000000000000000000000000000000000000000000
a000000a000000000000000066666666060000600600006600666666000000007777776600000000000000000000000000000000000000000000000000000000
aa0000aa000000000000000000000000060000600600006000000000909904402222221100000000000000000000000000000000000000000000000000000000
00077000c0eee00c00000000000000000007700005fffff505fffff505fffff50044500000000000000000000000000000000000000000000000000000000000
00777b000eeee000007cc700555505550077780000ffffff00ffdfff00ff77ff0040500000000000000000000000000000000000000000000000000000000000
07bb77300ee0000007c07c70a9995a990788772000fffbbf00fdcdff00f77bff0005000000000000000000000000000000000000000000000000000000000000
07bb77600ee000c076c00c67999459940788776000f33fff00dcc71f007bb73f0004000000000000000000000000000000000000000000000000000000000000
7777776600ee0000076cc670494004417777776600ff3bbf00dc7c1f007bb77f0005000000000000000000000000000000000000000000000000000000000000
77777b36c00ee00000777700500001007777782600f33fff00fdc1ff0077773f0066d00000000000000000000000000000000000000000000000000000000000
0777b3300000ee0000000000010110000777822000ff3ff000ff1ff000f773f00066d00000000000000000000000000000000000000000000000000000000000
0076630000000ee000000000000000000076620000fff00000fff00000fff0000006000000000000000000000000000000000000000000000000000000000000
07710177000000000011a7a000118e80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
077617760000000000117aa00011e880000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
11771761000110000117aa9a011e8828000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
771aa700001dd1000117aa9a011e8828000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
007aa166001dd100011aaa9a01188828000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0771761100011000011aaa9a01188828000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
77617770000000000011a9a000118280000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
76101670000000000011aaa000118880000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00b553000095580000655c0000000000000000000000000000b3300000b330000b000005f1005050000000000000000000000000000000000000000000000000
0b1b3130092982800616c1c0000000000000000000000000088803000ddd0300030b00b0100001f1000000000000000000000000000000000000000000000000
b31b3131982982826c16c1c100000000000000000000000087882300d7dd130000b00b3005050015000000000000000000000000000000000000000000000000
b31b3131982982826c16c1c100bb000000ee00000099000088882300dddd13000b303000005f5000000000000000000000000000000000000000000000000000
b3133131982882826c1cc1c1000033000000220000004400088203000dd10300300030b001050050000000000000000000000000000000000000000000000000
3313313188288282cc1cc1c100bb300000ee200000994000000003300000033030b00b001f100555000000000000000000000000000000000000000000000000
03133110082882200c1cc11000003300000022000000440000003300000033000b0503b001505010000000000000000000000000000000000000000000000000
003111000082220000c111000000300000002000000040000000030000000300030000035001f150000000000000000000000000000000000000000000000000
00a9900000b33000007cc0000044400000e220000066600000855000000000000000000000000000000000000000000000000000000000000000000000000000
0a1119000b11130007111c00041114000e1212000616160008050500000000000000000000000000000000000000000000000000000000000000000000000000
009991000133310000ccc10000444000002221000686860008855800000000000000000000000000000000000000000000000000000000000000000000000000
0009100001031000000c100000040000000210000066600002888200000000000000000000000000000000000000000000000000000000000000000000000000
0009100000131000000c100000040300000200000006000002080200000000000000000000000000000000000000000000000000000000000000000000000000
0009900000033000000cc00000044300000220000006600002088000000000000000000000000000000000000000000000000000000000000000000000000000
0009100000031000000c100000041000000210000006100002282000000000000000000000000000000000000000000000000000000000000000000000000000
0009910000033100000cc10000044300000220000006600022288220000000000000000000000000000000000000000000000000000000000000000000000000
006d6000006d6000006d600000d0d0000d000d00d00000d0d00000d0000000000000000000000000000000000000000000000000000000000000000000000000
066d6600066d6600066d660006d0d6006d000d60d00000d0d00900d0000000000000000000000000000000000000000000000000000000000000000000000000
666d6660666d6660666d666066d0d6606d000d60d00000d0d00900d0000000000000000000000000000000000000000000000000000000000000000000000000
66000660660a066066000660660006606d000d60d00000d0d00900d0000dd0000000000000000000000000000000000000000000000000000000000000000000
66000660660a066066aaa660660006606d000d60d00000d0d90909d0000dd0000000000000000000000000000000000000000000000000000000000000000000
66606660666a66606660666066d0d6606d000d60d00000d0d09990d0000000000000000000000000000000000000000000000000000000000000000000000000
666d6660666d6660666d666066d0d6606d000d60d00000d0d00900d0000000000000000000000000000000000000000000000000000000000000000000000000
666d6660666d6660666d666066d0d6606d000d60d00000d0d00000d0000000000000000000000000000000000000000000000000000000000000000000000000
00455100451000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
04454510451000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
45454551451000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
45454541451000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
45454041451000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
45454541451000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
45454541451000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
55555551451000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
05044050050440500504405000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00545500005455000055450000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
04171740041717400471714000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
04171740041717400471714000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
44777744447777444477774400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
44444444444444444444444400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000ff000000ff000000ff00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00440440044044000440440000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000004f4f4f4f4f4f4f4f4f4f4f4f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000004f4a4949494949494949474f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000004f4d45464646454645464b4949494700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000004f4d46454646464546455d5e5f5f4b49494949494949494947000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000004f4d45464546464645465e5d5f5f5f5f5f5e5d5e5f5d5e5f48000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000004f4d46454645454645454a494949475f5f5f5e5d5f5e5d5d48000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000004f4d4546454545464646484f004f4d5e5f5f5f5f5f5f5e5d48000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000004f4d4645464546454646484f004f4d5d5f5f5f5f5f5f5f5e48000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000004f4d4546464645464546484f00004d5f5f5f5f5f5f5f5f5f48000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000004f4d4645464646454645484f00004d5d5f5f5f5f5f5f5f5f48000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000004f4d4546454646464546484f00004d5e5d5d5f5f5f5d5f5d48000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000004f4d4645464545464545484f00004b4e4e4e4e4e4e4e4e4e4c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000004f4d4546454545464646484f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000004f4d4645464546454646484f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000004f4d4546464645464546484f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000004f4d4645464646454645484f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000004f4d4546454646464546484f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000004f4d4645464545464545484f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000004f4b4e4e4e4e4e4e4e4e4c4f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000004f4f4f4f4f4f4f4f4f4f4f4f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__sfx__
000100000d050070500705006050040500305003050020500105000050000000000000000000000000000000000000000000000000000000000000000000e5000f5000e5000f5000550005500055000550005500
00080000135501a550265503255030300283001d3001330013300173001d300243002d3002f300192001820018200192001c2001e200222002320026200272002820029200292002a2002b2002b2000000000000
00040000086310063100630006330a6000a6000a6000a6030960309603086030760307603086030860308603006030e6030f6031a603036030f6030f6030e6030e60313603146031460314603136031260312603
000600001762416621166211460002600026540263302625176041660116601146000260002604026030260527604166011660114600026000260402603026050c7000c7000c7000c7000c7000c7000c7000c705
0005000005554155500c5501c55011550215501855028550185002852011500285101b50028510005001c7051c7041c7001c7001c7001c7001c7001c7001c7001c7001c7001c7001c7001c7001c7001c7001c705
011800002373423730237302373023730237302373023730237302373023730237302373023730237302373523734237302373023730237302373023730237302373023730237302373023730237302373023735
011800000e0331f70526704267050d6152370524704247050e03300000000050000500005000050d615000050e0330000500005000050d615040050b005070050e03300005000050000500005000050d61500005
011200001f7341f7301f7301f7301f7301f7301f7301f7301f7301f7301f7301f7301f7301f7301f7301f7351f7341f7301f7301f7301f7301f7301f7301f7301f7301f7301f7301f7301f7301f7301f7301f735
011100002305033000240502400023050000001f050000001c050000001a050000001c0541c0501c0501c0551f000000001f0541f0501f0501f0552100000000210542105021051210001f0541f0401f0301f020
011000002f0501770430050240002f050000002b050000002f0501c0002b0501c000240501f000230501f0002305033000240502400023050000001f050000001c0541c0501c0501c0551a0541a0501a0501a055
011000001c0500000000000000001f000000001f0500000000000210000000000000210500000000000000001f050000000000000000000000000000000000002305033000240502400023050000001f05000000
011000001c0500000000000000001f000000001f05000000000000000000000000002305000000000002300023050000002405000000000000000000000000002405000000260500000028050000002405000000
0110000026050000000000000000000000000024050000000000000000000000000021050000001f000000001f050000002105000000000000000000000000002405000000260500000028050000002405000000
0110000026050000000000000000000000000024050000000000000000000000000021050000002b0500000028050000000000000000000000000000000000002305033000240502400023050000001f05000000
011000000406300000241000406300000000000406300000106330000000000040630400000000040630406304063000000000004063000000000004063000001063300000000000400004063000000400004063
__music__
01 43444547
00 43444746
00 43444546
02 43444746
00 45424644
00 45424644
00 45424644
02 41424644
00 41424344
00 41424344
00 41424344
00 41424344
00 41424344
00 41424344
00 41424344
00 41424344
00 41424344
00 41424344
00 41424344
00 41424344
00 41424344
00 41424344
00 41424344
00 41424344
00 41424344
00 41424344
00 41424344
00 41424344
00 41424344
00 41424344
00 41424344
00 41424344
00 09424344
01 0a0e4344
00 0b0e4344
00 0c0e4344
02 0d0e4344

